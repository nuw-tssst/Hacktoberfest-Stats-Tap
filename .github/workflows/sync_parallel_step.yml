name: Parallel update step (reusable)

on:
  workflow_call:
    inputs:
      step:
        description: 'Synchronized parallelism step number'
        required: true
        type: string
      is_prev_step_a:
        description: 'Previous step A for restoring shared resources (optional)'
        required: false
        default: ''
        type: string
      is_prev_step_b:
        description: 'Previous step B for restoring shared resources (optional)'
        required: false
        default: ''
        type: string
      is_local_commit:
        description: 'Push local changes (optional)'
        required: false
        default: ''
        type: string

permissions:
  actions: write
  contents: write

jobs:
  run-step:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job: [1, 2, 3, 4]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.REPO_NAME }}
          ref: main
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Python v3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Restore shared resources from previous step A
        if: inputs.is_prev_step_a != ''
        uses: actions/cache/restore@v4
        with:
          path: prevA
          key: run-${{ github.run_id }}-step-${{ inputs.is_prev_step_a }}-job-${{ matrix.job }}

      - name: Restore shared resources from previous step B
        if: inputs.is_prev_step_b != ''
        uses: actions/cache/restore@v4
        with:
          path: prevB
          key: run-${{ github.run_id }}-step-${{ inputs.is_prev_step_b }}-job-${{ matrix.job }}

      - name: Merge restored shared resources
        if: inputs.is_prev_step_a != ''
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p files
          for d in prevA prevB; do
            [ -d "$d" ] || continue
            find "$d" -type f -exec mv -f {} files/ \;
          done

      - name: Arg configuration
        shell: bash
        run: |
          MONTH=$(date -u +%m)
          if [ "$MONTH" -eq 10 ]; then
            DAY=$(date -u +%d | sed 's/^0//')
          else
            DAY=31
          fi
          HOUR=$(date -u +%H)
          if [ "$HOUR" -lt 4 ]; then
            PHASE=1
          elif [ "$HOUR" -lt 8 ]; then
            PHASE=2
          elif [ "$HOUR" -lt 12 ]; then
            PHASE=3
          elif [ "$HOUR" -lt 16 ]; then
            PHASE=4
          elif [ "$HOUR" -lt 20 ]; then
            PHASE=5
          else
            PHASE=6
          fi
          {
            echo "DAY=$DAY"
            echo "PHASE=$PHASE"
          } >> "$GITHUB_ENV"

      - name: Run step ${{ inputs.step }}
        env:
          GH_TOKEN: ${{ secrets[format('GH_TOKEN_{0}', matrix.job)] }}
          KEY: ${{ secrets.KEY }}
          JOB_ID: ${{ matrix.job }}
          NUM_JOBS: ${{ strategy.job-total }}
          STEP: ${{ inputs.step }}
        run: |
          python hack_stats_fetch.py \
            --start "$DAY" --end "$DAY" \
            --job "${JOB_ID}" --jobs "${NUM_JOBS}" \
            --step "${STEP}" --phase "${PHASE}"

      - name: Update shared resources
        uses: actions/cache/save@v4
        with:
          path: files
          key: run-${{ github.run_id }}-step-${{ inputs.step }}-job-${{ matrix.job }}

      - name: Commit
        if: inputs.is_local_commit != ''
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
          REPO: ${{ secrets.REPO_NAME }}
          JOB_ID: ${{ matrix.job }}
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          git add files/*.csv || true
          if ! git diff --cached --quiet; then
            git config user.name "Adam Ross"
            git config user.email "14985050+R055A@users.noreply.github.com"
            git commit -m "Update $(date -u +'%Y') Hacktoberfest stats (job ${JOB_ID})"

            for attempt in 1 2 3; do
              git pull --rebase "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" main || true
              if git push "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" HEAD:main; then
                break
              fi
              echo "Push fail #$attempt..."
              sleep $(((RANDOM % 8) + 3))
            done
          fi
